diff --git a/lib/src/types/encoding.rs b/lib/src/types/encoding.rs
index bfb332a8c..b5ca834ca 100644
--- a/lib/src/types/encoding.rs
+++ b/lib/src/types/encoding.rs
@@ -133,7 +133,7 @@ impl DecodingOptions {
         Self::default()
     }
 
-    fn depth_lock(&self) -> core::result::Result<DepthLock, StatusCode> {
+    pub fn depth_lock(&self) -> core::result::Result<DepthLock, StatusCode> {
         DepthLock::obtain(self.decoding_depth_gauge.clone())
     }
 }
diff --git a/lib/src/types/extension_object.rs b/lib/src/types/extension_object.rs
index 257b32df2..6ced6c982 100644
--- a/lib/src/types/extension_object.rs
+++ b/lib/src/types/extension_object.rs
@@ -84,6 +84,8 @@ impl BinaryEncoder<ExtensionObject> for ExtensionObject {
     }
 
     fn decode<S: Read>(stream: &mut S, decoding_options: &DecodingOptions) -> EncodingResult<Self> {
+        // Extension object is depth checked to prevent deep recursion
+        let _depth_lock = decoding_options.depth_lock()?;
         let node_id = NodeId::decode(stream, decoding_options)?;
         let encoding_type = u8::decode(stream, decoding_options)?;
         let body = match encoding_type {
diff --git a/lib/src/types/variant.rs b/lib/src/types/variant.rs
index 4d6f30e18..bd1776482 100644
--- a/lib/src/types/variant.rs
+++ b/lib/src/types/variant.rs
@@ -1012,8 +1012,11 @@ impl Variant {
         } else if Self::test_encoding_flag(encoding_mask, EncodingMask::LOCALIZED_TEXT) {
             Self::from(LocalizedText::decode(stream, decoding_options)?)
         } else if Self::test_encoding_flag(encoding_mask, EncodingMask::EXTENSION_OBJECT) {
+            // Extension object internally does depth checking to prevent deep recursion
             Self::from(ExtensionObject::decode(stream, decoding_options)?)
         } else if Self::test_encoding_flag(encoding_mask, EncodingMask::VARIANT) {
+            // Nested variant is depth checked to prevent deep recursion
+            let _depth_lock = decoding_options.depth_lock()?;
             Variant::Variant(Box::new(Variant::decode(stream, decoding_options)?))
         } else if Self::test_encoding_flag(encoding_mask, EncodingMask::DATA_VALUE) {
             Self::from(DataValue::decode(stream, decoding_options)?)
