diff --git a/Makefile.in b/Makefile.in
index a792d6e..9b7a90d 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -50,9 +50,9 @@ clean:
 	done
 
 distclean: clean
-	@for DIR in src examples; do \
+	@for DIR in src examples tests; do \
 		echo "===> $${DIR}"; \
-		(cd $${DIR}; make clean; ${RM} -f Makefile); \
+		(cd $${DIR}; make clean; ${RM} Makefile); \
 		echo "<=== $${DIR}"; \
 	done
 	${RM} -rf autom4te.cache
diff --git a/configure b/configure
index 715f2b8..98e2b75 100755
--- a/configure
+++ b/configure
@@ -2065,7 +2065,7 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
 ac_config_headers="$ac_config_headers config.h"
 
-ac_config_files="$ac_config_files Makefile src/qdecoder.pc src/Makefile examples/Makefile"
+ac_config_files="$ac_config_files Makefile src/qdecoder.pc src/Makefile examples/Makefile tests/Makefile"
 
 
 ## Set path
@@ -5006,6 +5006,7 @@ do
     "src/qdecoder.pc") CONFIG_FILES="$CONFIG_FILES src/qdecoder.pc" ;;
     "src/Makefile") CONFIG_FILES="$CONFIG_FILES src/Makefile" ;;
     "examples/Makefile") CONFIG_FILES="$CONFIG_FILES examples/Makefile" ;;
+    "tests/Makefile") CONFIG_FILES="$CONFIG_FILES tests/Makefile" ;;
 
   *) as_fn_error $? "invalid argument: \`$ac_config_target'" "$LINENO" 5;;
   esac
diff --git a/configure.ac b/configure.ac
index 603bec0..50a61c6 100644
--- a/configure.ac
+++ b/configure.ac
@@ -77,7 +77,7 @@ AC_DEFUN([Q_ARG_DISABLE], [
 AC_INIT([qDecoder], [12 RELEASE], [http://www.qdecoder.org/])
 AC_CONFIG_SRCDIR([config.h.in])
 AC_CONFIG_HEADER([config.h])
-AC_CONFIG_FILES([Makefile src/qdecoder.pc src/Makefile examples/Makefile])
+AC_CONFIG_FILES([Makefile src/qdecoder.pc src/Makefile examples/Makefile tests/Makefile])
 
 ## Set path
 PATH="$PATH:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin"
diff --git a/src/internal.c b/src/internal.c
index 3a16b79..804d730 100644
--- a/src/internal.c
+++ b/src/internal.c
@@ -34,6 +34,7 @@
 #include <stdlib.h>
 #include <stdbool.h>
 #include <stdarg.h>
+#include <ctype.h>
 #include <string.h>
 #include <unistd.h>
 #include <libgen.h>
@@ -49,7 +50,7 @@
 #include "compat/msw_missing.h"
 #endif
 
-// Change two hex character to one hex value.
+// Change two hex characters to one hex value.
 char _q_x2c(char hex_up, char hex_low)
 {
     char digit;
@@ -140,8 +141,13 @@ size_t _q_urldecode(char *str)
                 break;
             }
             case '%': {
-                *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));
-                pEncPt += 2;
+                if (*(pEncPt + 1) != '\0' && isxdigit(*(pEncPt + 1)) \
+                    && *(pEncPt + 2) != '\0' && isxdigit(*(pEncPt + 2))) {
+                    *pBinPt++ = _q_x2c(*(pEncPt + 1), *(pEncPt + 2));
+                    pEncPt += 2;
+                } else {
+                    *pBinPt++ = *pEncPt;
+                }
                 break;
             }
             default: {
diff --git a/tests/Makefile.in b/tests/Makefile.in
new file mode 100644
index 0000000..5066936
--- /dev/null
+++ b/tests/Makefile.in
@@ -0,0 +1,62 @@
+################################################################################
+## qDecoder - http://www.qdecoder.org
+##
+## Copyright (c) 2000-2022 Seungyoung Kim.
+## All rights reserved.
+##
+## Redistribution and use in source and binary forms, with or without
+## modification, are permitted provided that the following conditions are met:
+##
+## 1. Redistributions of source code must retain the above copyright notice,
+##    this list of conditions and the following disclaimer.
+## 2. Redistributions in binary form must reproduce the above copyright notice,
+##    this list of conditions and the following disclaimer in the documentation
+##    and/or other materials provided with the distribution.
+##
+## THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+## AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+## ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+## POSSIBILITY OF SUCH DAMAGE.
+################################################################################
+
+prefix		= @prefix@
+exec_prefix	= @exec_prefix@
+
+## qDecoder definitions
+QDECODER_INCDIR		= ../src
+QDECODER_LIBDIR		= ../src
+
+## Compiler options
+CC		= @CC@
+CFLAGS		= @CFLAGS@
+CPPFLAGS	= @CPPFLAGS@ -I${QDECODER_INCDIR}
+
+TARGETS		= \
+		test_q_urldecode
+QUNIT_OBJ   = qunit.o
+LIBQDECODER	= ${QDECODER_LIBDIR}/libqdecoder.a
+
+## Main
+all:	${TARGETS}
+
+run:	test
+test:	all
+	@./launcher.sh ${TARGETS}
+
+test_q_urldecode: test_q_urldecode.o ${QUNIT_OBJ}
+	${CC} ${CFLAGS} ${CPPFLAGS} -o $@ test_q_urldecode.o ${QUNIT_OBJ} ${LIBQDECODER}
+
+## Clear Module
+clean:
+	${RM} -f *.o ${TARGETS}
+
+## Compile Module
+.c.o:
+	${CC} ${CFLAGS} ${CPPFLAGS} -c -o $@ $<
diff --git a/tests/README.md b/tests/README.md
new file mode 100644
index 0000000..1ff1f2a
--- /dev/null
+++ b/tests/README.md
@@ -0,0 +1,37 @@
+qDecoder Unit Tests
+===================
+
+# How to run unit tests.
+
+```
+$ make test
+Test internal.c/_q_urldecode
+======================================================================
+* TEST : Test plain string . OK (1 assertions, 0ms)
+* TEST : Test urlencoded string . OK (1 assertions, 0ms)
+* TEST : Test urlencoded string exceptions .. OK (2 assertions, 0ms)
+======================================================================
+PASS - 3/3 tests passed.
+```
+
+# How to write unit tests
+
+We need your help in writing unit tests. Please refer qunit.h for your reference.
+
+```C
+#include "qunit.h"
+#include "qdecoder.h"
+
+QUNIT_START("Test title");
+
+TEST("Test name1") {
+    ASSERT_EQUAL_STR("abc", "abc");
+    ASSERT_EQUAL_INT(8, 8);
+}
+
+TEST("Test name2") {
+    ASSERT_EQUAL_PT(NULL == NULL);
+}
+
+QUNIT_END();
+```
diff --git a/tests/launcher.sh b/tests/launcher.sh
new file mode 100755
index 0000000..cb6e3ac
--- /dev/null
+++ b/tests/launcher.sh
@@ -0,0 +1,37 @@
+#!/bin/sh
+
+if [ $# = 0 ]; then
+	echo "This program is called by make. Please use \"make test\" command instead."
+	exit 1
+fi
+
+FAIL=0
+FAILDESC=""
+for EXECUTABLE in $*; do
+	./$EXECUTABLE
+	if [ $? != 0 ]; then
+		FAIL=1
+		FAILDESC="$FAILDESC $EXECUTABLE"
+	fi
+	echo ""
+done
+
+if [ $FAIL != 0 ]; then
+	echo "======================================================================"
+	echo "**** OOOOOPS!!! UNSUCESSFUL UNIT TEST FOUND. PLEASE FIX AND RERUN ****"
+	echo "======================================================================"
+	echo "Fails in =>$FAILDESC"
+	exit 1
+fi
+
+echo "======================================================================"
+echo "****             Good job! All tests are successful               ****"
+echo "======================================================================"
+echo "*   ____                 _     All tests have finished successfully. *"  
+echo "*  / ___| ___   ___   __| |     | | ___ | |__   | |                  *"
+echo "* | |  _ / _ \ / _ \ / _\` |  _  | |/ _ \| '_ \  | |                  *"
+echo "* | |_| | (_) | (_) | (_| | | |_| | (_) | |_) | |_|                  *"
+echo "*  \____|\___/ \___/ \__,_|  \___/ \___/|_.__/  (_)                  *"
+echo "======================================================================"
+echo "Tested: $*"
+exit 0
diff --git a/tests/qunit.c b/tests/qunit.c
new file mode 100644
index 0000000..9bc9a1b
--- /dev/null
+++ b/tests/qunit.c
@@ -0,0 +1,42 @@
+/******************************************************************************
+ * qunit - C Unit Test Framework
+ *
+ * Copyright (c) 2014-2022 Seungyoung Kim.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *****************************************************************************/
+
+#include <stdio.h>
+#include <sys/time.h>
+
+/**
+ * Returns the current time in milliseconds.
+ *
+ * @return current time in milliseconds.
+ */
+long _qunit_current_milli(void) {
+    struct timeval tv;
+    gettimeofday(&tv, NULL);
+    long time = (tv.tv_sec * 1000) + (tv.tv_usec / 1000);
+    return time;
+}
\ No newline at end of file
diff --git a/tests/qunit.h b/tests/qunit.h
new file mode 100644
index 0000000..7c051d3
--- /dev/null
+++ b/tests/qunit.h
@@ -0,0 +1,127 @@
+/******************************************************************************
+ * qunit - C Unit Test Framework
+ *
+ * Copyright (c) 2014-2022 Seungyoung Kim.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *****************************************************************************/
+
+/**
+ * qunit C Unit Test Framework.
+ *
+ * @file qunit.h
+ */
+
+#ifndef QUNIT_H
+#define QUNIT_H
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdbool.h>
+#include <sys/time.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern long _qunit_current_milli(void);
+
+#define OUTSTREAM    (stdout)
+#define PRINT(fmt, args...) do {                                            \
+        fprintf(OUTSTREAM, "" fmt, ##args);                                 \
+    } while(0)
+#define PRINTLN(fmt, args...) do {                                          \
+        fprintf(OUTSTREAM, "" fmt "\n", ##args);                            \
+    } while(0)
+
+#define QUNIT_START(title)                                                  \
+char *_q_title = title;                                                     \
+int _q_tot_tests = 0;                                                       \
+int _q_tot_failed = 0;                                                      \
+int _q_this_failed = 0;                                                     \
+int _q_errcnt = 0;                                                          \
+int _q_assert_cnt = 0;  /* number of assert test in a test */               \
+int _q_assert_dot_cnt = 0;  /* number of dots printed out in a test. */     \
+long _q_timer;                                                              \
+int main(int argc, char **argv) {                                           \
+    PRINTLN("%s", _q_title);                                                \
+    PRINTLN("======================================================================");  \
+
+#define QUNIT_END()                                                         \
+    _TEST_RESULT();                                                         \
+    PRINTLN("======================================================================");  \
+    PRINTLN("%s - %d/%d tests passed.",                                     \
+        ((_q_tot_failed == 0) ? "PASS" : "FAIL"),                           \
+        (_q_tot_tests - _q_tot_failed), _q_tot_tests);                      \
+    return _q_tot_failed;                                                   \
+}
+
+#define TEST(name)                                                          \
+    _TEST_RESULT();                                                         \
+    _q_tot_tests++;                                                         \
+    _q_assert_cnt = 0;                                                      \
+    _q_assert_dot_cnt = 0;                                                  \
+    PRINT("* TEST : %s ", name);                                            \
+    TIMER_START(_q_timer);
+
+#define _TEST_RESULT()                                                      \
+    TIMER_STOP(_q_timer);                                                   \
+    if (_q_tot_tests ) PRINTLN(" %s (%d assertions, %ldms)",                \
+        (_q_this_failed) ? "FAIL" : "OK", _q_assert_cnt, _q_timer);         \
+    _q_tot_failed += (_q_this_failed) ? 1 : 0;                              \
+    _q_this_failed = 0;
+
+#define ASSERT(expr)                                                        \
+    _q_assert_cnt++;                                                        \
+    if (! (expr))  {                                                        \
+        _q_this_failed++;                                                   \
+        PRINTLN("\nAssertion '%s' failed (%s:%d)", #expr, __FILE__, __LINE__); \
+    } else if (_q_assert_dot_cnt < 30) {                                    \
+        PRINT(".");                                                         \
+        _q_assert_dot_cnt++;                                                \
+    }
+
+#define ASSERT_EQUAL_STR(s1, s2) ASSERT(!strcmp(s1, s2))
+#define ASSERT_EQUAL_INT(d1, d2) ASSERT(d1 == d2)
+#define ASSERT_EQUAL_BOOL(d1, d2) ASSERT(d1 == d2)
+#define ASSERT_EQUAL_PT(p1, p2) ASSERT(p1 == p2)
+#define ASSERT_EQUAL_MEM(p1, p2, n) ASSERT(!memcmp(p1, p2, n))
+#define ASSERT_NULL(p) ASSERT(NULL == p)
+#define ASSERT_NOT_NULL(p) ASSERT(NULL != p)
+#define ASSERT_TRUE(b) ASSERT(b)
+#define ASSERT_FALSE(b) ASSERT(!(b))
+
+#define TIMER_START(x) do {                                                 \
+        x = _qunit_current_milli();                                         \
+    } while(0)
+
+#define TIMER_STOP(x) do {                                                  \
+        x = _qunit_current_milli() - x;                                     \
+    } while(0)
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* QUNIT_H */
diff --git a/tests/test_q_urldecode.c b/tests/test_q_urldecode.c
new file mode 100644
index 0000000..9147614
--- /dev/null
+++ b/tests/test_q_urldecode.c
@@ -0,0 +1,83 @@
+/******************************************************************************
+ * qLibc
+ *
+ * Copyright (c) 2010-2015 Seungyoung Kim.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright notice,
+ *    this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *****************************************************************************/
+
+#include "qunit.h"
+#include "qdecoder.h"
+#include "internal.h"
+#include <ctype.h>
+
+void test_urldecode(const char *v1, const char *v2);
+
+QUNIT_START("Test internal.c/_q_urldecode");
+
+TEST("Test plain strings")
+{
+    test_urldecode("Hello World", "Hello World");
+}
+
+TEST("Test urlencoded strings")
+{
+    test_urldecode("Hello%20World%21%40%23", "Hello World!@#");
+    test_urldecode("Hello World!@#", "Hello World!@#");
+    test_urldecode("%60%7E%21%40%23%24%25%5E%26%2A%28%29%2D%5F%3D%2B%5B%7B%5D%7D%5C%7C%3B%3A%27%22%2C%3C%2E%3E%2F%3F", \
+    "`~!@#$%^&*()-_=+[{]}\\|;:'\",<.>/?");
+}
+
+TEST("Test exceptions")
+{
+    // ending with '%' character
+    test_urldecode("Hello%20World%21%40%", "Hello World!@%");
+
+    // incomplete ending with '%2'
+    test_urldecode("Hello%20World%21%40%2", "Hello World!@%2");
+
+    // improper encoding - '%%'
+    test_urldecode("Hello%20World%21%40%%", "Hello World!@%%");
+
+    // improper encoding - '%%%'
+    test_urldecode("Hello%20World%21%40%%%", "Hello World!@%%%");
+
+    // improper encoding - '%%%%'
+    test_urldecode("Hello%20World%21%40%%%%", "Hello World!@%%%%");
+
+    // improper encoding - '%%%61%%'
+    test_urldecode("Hello%20World%21%40%%%61%%", "Hello World!@%%a%%");
+
+    // non hexadecimal digits - '%1Q'
+    test_urldecode("Hello%20World%21%40%1Q", "Hello World!@%1Q");
+}
+
+QUNIT_END();
+
+void test_urldecode(const char *v1, const char *v2)
+{
+    char *v = strdup(v1);
+    _q_urldecode(v);
+    ASSERT_EQUAL_STR(v, v2);
+    free(v);
+}
